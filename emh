#!/bin/bash

order=$1
emhDir=$(dirname "$(readlink -f "$0")")

if [[ $order = 'start' ]] 
then
	echo "Optimizing system:"
	sudo "$emhDir"/Tools/enableKeyboardAndMouse.perl
	emh bright
	echo deep | sudo tee /sys/power/mem_sleep #enable deep sleep for suspend
fi

if [[ $order = 'update' ]] 
then
	echo "Updating System, please enter sudo password:"
	sudo apt update
	if [ "$(apt-get -s upgrade | awk '/^Inst/ { print $2 }' | wc -l)" -gt 0 ]
	then
		sudo apt upgrade
	fi
fi

if [[ $order = 'run' ]]
then
	echo "Running config"
	python3  "$emhDir"/Tools/runProject.py ${@:2}
fi

if [[ $order = 'crawl' ]]
then
	echo "Crawling Website"
	"$emhDir"/Tools/webCrawl.sh ${@:2} #crawls website with input of 'emh crawl {URL} {Directory to store data}'
fi

if [[ $order = 'bright' ]]
then
	defaultBrightness=$(python3  "$emhDir"/Tools/getConfig.py "defaultBrightness" 0.3)

	echo "Changing Brightness"
	if [ $# -gt 1 ]
	then
		xrandr --output eDP-1 --brightness ${@:2} #TODO grab laptop screen name regardless of nvidia or intel graphics
	else
		xrandr --output eDP-1 --brightness "$defaultBrightness"
	fi
fi

if [[ $order = 'gb' ]]
then
	echo "Changing Brightness"
	xrandr --output eDP-1-1 --brightness 0.3
fi

if [[ $order = 'mount' ]]
then
	mkdir -p ~/OSUengr
	sshfs hamptone@access.engr.oregonstate.edu:/nfs/stak/users/hamptone ~/OSUengr
fi

if [[ $order = 'unmount' ]]
then
	fusermount -u ~/OSUengr
	rmdir ~/OSUengr
fi

if [[ $order = 'connect' ]]
then
	#TODO move get config to function
	location=$(python3  "$emhDir"/Tools/getConfig.py "connect.$2")
	if [ $? -eq 0 ]
	then
		ssh "$location" ${@:3}
	else
		echo "Couldn't find a config location for that server ($2)"
	fi
fi

if [[ $order = 'work' ]]
then
	slack -s & disown
	xdg-open https://osu.workforcehosting.com/workforce/WebClock.do
	thunderbird & disown
	#terminator -l 'General_Work' #Not working for some reason and causing problems
	#hexchat & disown
fi

if [[ $order = 'unwork' ]]
then
	xdg-open https://osu.workforcehosting.com/workforce/WebClock.do
	pkill slack --signal SIGTERM
	#pkill hexchat --signal SIGTERM
fi

if [[ $order = 'backup' ]]
then
	location=$(python3 "$emhDir"/Tools/getConfig.py "backup.destination.$2")
	if [ $? -eq 0 ]
	then
		backupScript=$(python3 "$emhDir"/Tools/backup.py "$2")
		echo "$backupScript"
		read -r -p "Are you sure? [y/N] " response
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
		then
			echo "Running backup..."
			eval "$backupScript"
		else
			echo "Okay, exiting"
		fi
	else
		echo "Couldn't find a config for that backup location ($2)"
	fi
fi

if [[ $order = 'journal' ]]
then
	if [[ $2 = 'view' ]]
	then
		jrnl -to today | less +G -R
	else
		echo "Adding journal entry"
		jrnl
	fi
fi

#aliases should always be last in this file
#TODO only run if another command didn't already
alias=$(python3  "$emhDir"/Tools/getConfig.py "aliases.$order")
if [ $? -eq 0 ]
then
	emh "$alias" ${@:2}
fi
